<?php

namespace ETS\Payment\OgoneBundle\Service;

use JMS\Payment\CoreBundle\Model\PaymentInstructionInterface;
use JMS\Payment\CoreBundle\PluginController\PluginControllerInterface;
use Symfony\Component\HttpFoundation\Request;

use ETS\Payment\OgoneBundle\Hash\HashGenerator;
use ETS\Payment\OgoneBundle\Response\FeedbackResponse;

class Ogone
{
    /**
     * @var JMS\Payment\CoreBundle\Plugin\PluginInterface
     */
    protected $pluginController;

    /**
     * @var ETS\Payment\OgoneBundle\Hash\HashGenerator
     */
    protected $generator;

    /**
     * @var ETS\Payment\OgoneBundle\Response\FeedbackResponse
     */
    protected $feedbackResponse;

    /**
     * @param PluginControllerInterface $pluginController
     * @param HashGenerator             $generator
     * @param Request                   $request
     */
    public function __construct(PluginControllerInterface $pluginController, HashGenerator $generator, Request $request)
    {
        $this->pluginController = $pluginController;
        $this->generator = $generator;
        $this->feedbackResponse = new FeedbackResponse($request);
    }

    /**
     * Triggers the approveAndDeposit method of the plugin controller after
     * checking if the feedback response has a valid hash and that the payment instruction has pending transactions.
     *
     * @param  PaymentInstructionInterface $instruction
     */
    public function handleTransactionFeedback(PaymentInstructionInterface $instruction)
    {
        if (!$this->isHashValid($this->feedbackResponse->getValues(), $this->feedbackResponse->getHash())) {
            throw new \LogicException('[Ogone - callback] hash verification failed');
        }

        if (null === $transaction = $instruction->getPendingTransaction()) {
            throw new \LogicException('[Ogone - callback] no pending transaction found for the payment instruction');
        }

        $transaction->getExtendedData()->set('feedbackResponse', $this->feedbackResponse);
        $transaction->setReferenceNumber($this->feedbackResponse->getPaymentId());

        $this->pluginController->approveAndDeposit($transaction->getPayment()->getId(), $this->feedbackResponse->getAmount());
    }

    /**
     * compares the hash given by ogone with a hash generated by Sha1Out generator
     *
     * @param  array   $values the order values sent by Ogone
     * @param  string  $hash   the hash provided by Ogone with the order values
     *
     * @return boolean         true if the hashes match
     */
    protected function isHashValid(array $values, $hash)
    {
        return $this->generator->generate($values) === $hash;
    }
}
